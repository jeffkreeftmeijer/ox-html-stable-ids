#+title: ox-html-stable-ids
#+options: toc:nil

#+headers: :exports none
#+begin_src org :tangle test/fixtures/hello-world.org
  ,* Hello, world!
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-publish-file "test/fixtures/hello-world.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
#+end_src

#+RESULTS:

When publishing HTML with Org mode's exporters, the headlines in the resulting documents get assigned ID attributes.
These are used as anchors, amongst other things.
By default, these are random, so a headline might get assigned ~org81963c6~ as its ID:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat test/fixtures/hello-world.html | grep "<h2 id="
#+end_src

#+RESULTS[bceb2028e92191632ebd6a8816fa0dfa61629e2e]:
: <h2 id="org81963c6">Hello, world!</h2>

Because subsequent exports of the same Org file produce different IDs, there's no way to bookmark a headline.
Instead, it'd be useful to have stable IDs, based on the titles they're attached to.
In the example above, that ID would be "hello-world".

#+headers: :exports none
#+headers: :tangle test.el
#+begin_src emacs-lisp
  (require 'ert)
  (load-file "ox-html-stable-ids.el")

  (ert-deftest hello-world-test ()
    (org-html-stable-ids-add)
    (find-file "test/fixtures/hello-world.org")
    (org-html-export-as-html)
    (should (string-match-p
             "<h2 id=\"hello-world"
             (with-current-buffer "*Org HTML Export*" (buffer-string))))
    (org-html-stable-ids-remove))
#+end_src

The function responsible for exporting headlines to HTML---named =org-html-headline=---calls =org-export-get-reference= to get a unique reference to the headline.
By overriding the latter, we can get the exporter to assign custom IDs to the document's headlines.

We'll write an advise to override the implementation of the =org-export-get-reference= function.
To make the custom function easy to switch on and off, we'll write two helper functions:

#+begin_src emacs-lisp
  (defun org-html-stable-ids-add ()
    (interactive)
    (advice-add #'org-export-get-reference :override #'org-html-stable-ids--get-reference))

  (defun org-html-stable-ids-remove ()
    (interactive)
    (advice-remove #'org-export-get-reference #'org-html-stable-ids--get-reference))
#+end_src

#+RESULTS:
: org-html-stable-ids-remove

To check if everything is hooked up correctly, we'll define =org-html-stable-ids--get-reference= that ignores the inputs and returns a static result:

#+begin_src emacs-lisp
  (defun org-html-stable-ids--get-reference (datum info)
    "hello-world")
#+end_src

As expected, the result used "hello-world" as the ID for all headlines:

#+headers: :exports none
#+begin_src org :tangle test/fixtures/multiple-headlines-fail.org
  ,* Hello, world!
  ,* Another headline!
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/multiple-headlines-fail.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat test/fixtures/multiple-headlines-fail.html | grep "<h2 id="
#+end_src

#+RESULTS[564a1f36688d42106a6f84efdae6067cf4bcbfd3]:
: <h2 id="hello-world">Hello, world!</h2>
: <h2 id="hello-world">Another headline!</h2>

To have the IDs match each separate headline's contents, take the headline from the =datum= parmeter with =org-element-property=:

#+headers: :exports none
#+headers: :tangle test.el
#+begin_src emacs-lisp
  (ert-deftest multiple-headlines-test ()
    (org-html-stable-ids-add)
    (find-file "test/fixtures/multiple-headlines.org")
    (org-html-export-as-html)
    (let ((buffer (with-current-buffer "*Org HTML Export*" (buffer-string))))
      (should (string-match-p "<h2 id=\"hello-world" buffer))
      (should (string-match-p "<h2 id=\"another-headline" buffer)))
    (org-html-stable-ids-remove))
#+end_src

#+RESULTS:
: multiple-headlines-test

#+name: kebab-case
#+headers: :exports none
#+begin_src emacs-lisp
  (defun org-html-stable-ids--to-kebab-case (string)
    "Convert STRING to kebab-case."
    (string-trim
     (replace-regexp-in-string "[^a-z0-9]+" "-"
                               (downcase string))
     "-" "-"))
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  <<kebab-case>>

  (defun org-html-stable-ids--get-reference (datum info)
    (org-html-stable-ids--to-kebab-case
     (org-element-property :raw-value datum)))
#+end_src

#+RESULTS:
: org-html-stable-ids--to-kebab-case

Now, all headlines in the file get assigned IDs that match their contents:

#+headers: :exports none
#+begin_src org :tangle test/fixtures/multiple-headlines.org
  ,* Hello, world!
  ,* Another headline!
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/multiple-headlines.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat test/fixtures/multiple-headlines.html | grep "<h2 id="
#+end_src

#+RESULTS[7ca8f72e3c8cf16f3aeb35f5f6e42e8d2c705f5f]:
: <h2 id="hello-world">Hello, world!</h2>
: <h2 id="another-headline">Another headline!</h2>

If a headline has a ~CUSTOM_ID~, that's used instead of the generated one:

#+begin_src org :tangle test/fixtures/cutom-id.org
  ,* Hello, world!
  ,* Another headline!
  :PROPERTIES:
  :CUSTOM_ID: custom-id
  :END:
#+end_src

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/cutom-id.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat test/fixtures/cutom-id.html | grep "<h2 id="
#+end_src

#+RESULTS[822b32d5e73e239d9f625fd73b224b0dab021a65]:
: <h2 id="hello-world">Hello, world!</h2>
: <h2 id="custom-id">Another headline!</h2>

In the current implementation, multiple headlines with the same contents get assigned the same ID.
Instead of making the headlines custom by adding numbers to the end, the exporter should raise an error and quit.
It's up to the author to update the document by giving the headlines meaningful custom IDs.

Exporting a document with duplicate IDs should raise an error.
To do so, each ID needs to be added to a cache when it's created, much like the original implementation of =org-get-reference=.
Whenever an ID is requested, an /internal-references/ key is added to the /info/ property list if it doesn't exist yet.
It holds a cons with the ID and the element.
If the function is called again with the same element, the ID is taken from the property list and returned.
However, if it's called with new element which resolves to an ID that's already in the property list, the function retuns an error:

#+begin_src emacs-lisp
  (defun org-html-stable-ids--get-reference (datum info)
    (let ((cache (plist-get info :internal-references)))
      (let ((id (org-html-stable-ids--to-kebab-case
                 (org-element-property :raw-value datum))))
        (or (rassq datum cache)
            (if (assoc id cache)
                (user-error "Duplicate ID: %s" id)
              (push (cons id datum) cache)
              (plist-put info :internal-references cache)
              id)))))
#+end_src

#+RESULTS:
: org-html-stable-ids--get-reference

Now, the function raises an error when two headlines resolve to the same ID:

#+begin_src org :tangle test/fixtures/duplicate-headlines.org
  ,* Hello, world!
  ,* Hello, world!
#+end_src

#+headers: :exports none
#+headers: :tangle test.el
#+begin_src emacs-lisp
  (ert-deftest src-block-test ()
    (org-html-stable-ids-add)
    (find-file "test/fixtures/src-block.org")
    (org-html-export-as-html)
    (let ((buffer (with-current-buffer "*Org HTML Export*" (buffer-string))))
      (should (string-match-p "<pre class=\"src src-shell\">" buffer)))
    (org-html-stable-ids-remove))

  (ert-deftest example-block-test ()
    (org-html-stable-ids-add)
    (find-file "test/fixtures/example-block.org")
    (org-html-export-as-html)
    (let ((buffer (with-current-buffer "*Org HTML Export*" (buffer-string))))
      (should (string-match-p "<pre class=\"example\">" buffer)))
    (org-html-stable-ids-remove))

  (ert-deftest duplicate-headlines-test ()
    (org-html-stable-ids-add)
    (find-file "test/fixtures/duplicate-headlines.org")
    (should-error (org-html-export-as-html))
    (org-html-stable-ids-remove))
#+end_src

#+RESULTS:
: duplicate-headlines-test

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/duplicate-headlines.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+begin_example
Duplicate ID: hello-world
#+end_example

In another scenario, one headline has a custom ID that matches a previously resolved ID.
Because this yields duplicate IDs, this should also raise an error.
Currently, it doesn't:

#+begin_src org :tangle test/fixtures/duplicate-headlines-with-custom-id.org
  ,* Hello, world!
  ,* Another headline!
  :PROPERTIES:
  :CUSTOM_ID: hello-world
  :END:
#+end_src

#+headers: :exports none
#+headers: :tangle test.el
#+begin_src emacs-lisp
  (ert-deftest duplicate-headlines-with-custom-id-test ()
    (org-html-stable-ids-add)
    (find-file "test/fixtures/duplicate-headlines-with-custom-id.org")
    (should-error (org-html-export-as-html))
    (org-html-stable-ids-remove))
#+end_src

#+RESULTS:
: duplicate-headlines-with-custom-id-test

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/duplicate-headlines-with-custom-id.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat test/fixtures/duplicate-headlines-with-custom-id.html | grep "<h2 id="
#+end_src

#+RESULTS[b9d6b8f9bd4da8321100bc141f378bb1ad953b3f]:
: <h2 id="hello-world">Hello, world!</h2>
: <h2 id="hello-world">Another headline!</h2>

This is caused by a function named =org-html--reference=, which circumvents =org-export-get-reference= when custom IDs are set.
To ensure all IDs are checked against the internal references list, we override =org-html--reference= to call =org-export-get-reference= directly:[fn:override]

[fn:override]: The =org-html--reference= function has added logic to check the /html-prefer-user-labels/ attribute.
By calling out to =org-export-get-reference= directly, that functionality is lost, meaning this library implies the /html-prefer-user-labels/ setting.


#+name: add-remove
#+begin_src emacs-lisp
  (defun org-html-stable-ids-add ()
    "Enable org-html-stable-ids."
    (interactive)
    (advice-add #'org-export-get-reference :override #'org-html-stable-ids--get-reference)
    (advice-add #'org-html--reference :override #'org-html-stable-ids--reference))

  (defun org-html-stable-ids-remove ()
    "Disable org-html-stable-ids."
    (interactive)
    (advice-remove #'org-export-get-reference #'org-html-stable-ids--get-reference)
    (advice-remove #'org-html--reference #'org-html-stable-ids--reference))
#+end_src

#+RESULTS:
: org-html-stable-ids-remove

#+name: org-html-reference
#+begin_src emacs-lisp
  (defun org-html-stable-ids--reference (datum info &optional named-only)
    "Call `org-export-get-reference` to get a reference for DATUM with INFO.

  If `NAMED-ONLY` is non-nil, return nil."
    (unless named-only
      (org-export-get-reference datum info)))
#+end_src

#+RESULTS:
: org-html-stable-ids--reference

Then, in our overridden version, we check if a custom ID is set before generating an ID from the element's value:

#+name: org-reference
#+begin_src emacs-lisp
  (defun org-html-stable-ids--get-reference (datum info)
    "Return a reference for DATUM with INFO.

  Return the element's :CUSTOM_ID, or an id generated from its
  `:raw-value` property.  Raise an error if the ID was used in the
  document before."
    (let ((cache (plist-get info :internal-references)))
      (let ((id (or
                 (org-element-property :CUSTOM_ID datum)
                 (org-html-stable-ids--to-kebab-case
                  (org-element-property :raw-value datum)))))
        (or (rassq datum cache)
            (if (assoc id cache)
                (user-error "Duplicate ID: %s" id)
              (push (cons id datum) cache)
              (plist-put info :internal-references cache)
              id)))))
#+end_src


#+RESULTS:
: org-html-stable-ids--get-reference

#+headers: :exports none
#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/duplicate-headlines-with-custom-id.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

Publishing the example again produces the expected error:

#+begin_example
Duplicate ID: hello-world
#+end_example

#+headers: :noweb yes
#+headers: :tangle ox-html-stable-ids.el
#+headers: :exports none
#+begin_src emacs-lisp
  ;;; ox-html-stable-ids.el -- Stable IDs for ox-html.el

  ;;; Commentary:

  ;; ox-html-stable-ids.el replaces the default, unstable IDs with
  ;; stable ones based on headline contents.
  ;;
  ;; Unstable ID:
  ;;    <h2 id="org81963c6">Hello, world!</h2>
  ;;
  ;; ID generated by ox-html-stable-ids:
  ;;    <h2 id="hello-world">Hello, world!</h2>

  ;;; Code:

  (require 'ox)

  <<kebab-case>>

  <<add-remove>>

  <<org-html-reference>>

  <<org-reference>>

  ;;; ox-html-stable-ids.el ends here
#+end_src


* Usage

Install ox-html-stable-ids with straight and use-package:

#+begin_src emacs-lisp
(use-package ox-html-stable-ids
  :straight '(ox-html-stable-ids
              :type git
              :host github
              :repo "jeffkreeftmeijer/ox-html-stable-ids.el"))
#+end_src

Call =org-html-stable-ids-add= before publishing a file:

#+begin_src emacs-lisp
  (org-html-stable-ids-add)
  (org-publish-file "test/fixtures/hello-world.org"
                    '("ox-html-stable-ids"
                      :publishing-function org-html-publish-to-html
                      :base-directory "."
                      :publishing-directory "."
                      :section-numbers nil
                      :with-toc nil))
  (org-html-stable-ids-remove)
#+end_src

#+RESULTS:

Get stable IDs:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+begin_src shell
  cat test/fixtures/hello-world.html | grep "<h2 id="
#+end_src

#+RESULTS[bceb2028e92191632ebd6a8816fa0dfa61629e2e]:
: <h2 id="hello-world">Hello, world!</h2>
